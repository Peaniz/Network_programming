Idle-RQ: chỉ đủ chứa một gói tin. Điều khiển luồng bằng cửa
sổ trượt có kích thước bằng 1

Continuous RQ: (FiFo) :
+ Selective Repeat: Mất 1 truyền 1
  - Ưu điểm: Hiệu quả hơn về băng thông, chỉ truyền lại gói tin bị mất
  - Nhược điểm: Phức tạp hơn trong việc quản lý bộ đệm và trình tự gói tin

+ Go Back-N: Mất 1 truyền N
  - Ưu điểm: Đơn giản hơn trong việc quản lý và triển khai
  - Nhược điểm: Lãng phí băng thông khi phải truyền lại nhiều gói tin
Ví dụ cho Go-Back-N:

Giả sử kích thước cửa sổ trượt là 4 và các gói tin được đánh số từ 0 đến 7.

1. Bên gửi truyền gói 0, 1, 2, 3
2. Bên nhận xác nhận gói 0, 1 (ACK 0, ACK 1)
3. Bên gửi truyền gói 4, 5
4. Gói 2 bị mất trong quá trình truyền
5. Bên nhận nhận được gói 3, nhưng không gửi ACK vì đang chờ gói 2
6. Bên gửi hết thời gian chờ cho gói 2
7. Bên gửi quay lại và truyền lại từ gói 2: gói 2, 3, 4, 5
8. Bên nhận nhận được gói 2, gửi ACK 2, ACK 3, ACK 4, ACK 5
9. Quá trình tiếp tục với gói 6, 7, ...

Trong ví dụ này, mặc dù chỉ có gói 2 bị mất, bên gửi vẫn phải truyền lại cả gói 3, 4, 5. Đây là đặc điểm của Go-Back-N, giúp đơn giản hóa quá trình xử lý nhưng có thể lãng phí băng thông trong một số trường hợp.

Mặc dù Go-Back-N có nhược điểm về việc lãng phí băng thông, nó vẫn được sử dụng vì:
1. Đơn giản hóa quá trình xử lý tại bên nhận: Bên nhận chỉ cần duy trì một bộ đệm duy nhất.
2. Phù hợp với mạng có tỷ lệ lỗi thấp: Trong môi trường ít xảy ra lỗi, việc truyền lại N gói ít khi xảy ra.
3. Hiệu quả trong việc phục hồi từ lỗi burst: Khi xảy ra lỗi burst, Go-Back-N có thể nhanh chóng khôi phục trạng thái đồng bộ.
4. Yêu cầu ít tài nguyên hơn: Cần ít bộ nhớ đệm và xử lý đơn giản hơn so với Selective Repeat.

Bộ phận phát dùng các gói nhận được để tìm các gói mất
Kiểu hiện: QUAN TÂM TỚI GÓI TIN BỊ MẤT -> phải xử lí các gói tin 
bị mất trước -> có danh sách hàng đợi(FIFO)

Trong Goback -N: Khi mất 1 gói truyền lại N gói và chỉ nhận lại đúng 1 gói

Kiểm soát sai số:
+ VRC: Vertical Redundancy Check - Kiểm tra dư thừa theo chiều dọc
  - Thêm 1 bit chẵn lẻ vào cuối mỗi byte dữ liệu
  - Phát hiện được lỗi đơn, không phát hiện được lỗi chẵn

+ LRC: Longitudinal Redundancy Check - Kiểm tra dư thừa theo chiều ngang
  - Thêm 1 byte kiểm tra vào cuối khung dữ liệu
  - Phát hiện được lỗi burst ngắn, không phát hiện được lỗi đối xứng

+ CRC: Cyclic Redundancy Check - Kiểm tra dư thừa theo chu kỳ
  - Sử dụng phép chia đa thức
  - Phát hiện được hầu hết các lỗi burst, hiệu quả cao nhất trong các phương pháp

+ Checksum: Tổng kiểm tra
  - Tính tổng các word dữ liệu, lấy bù 1 của kết quả
  - Thường được sử dụng ở tầng transport trong mô hình TCP/IP

+ Kiểm tra chẵn:
    - Tổng số bit 1 là chẵn: thêm bit 0
    - Tổng số bit 1 là lẻ: thêm bit 1
+ Kiểm tra lẻ:
    - Tổng số bit 1 là chẵn: thêm bit 1
    - Tổng số bit 1 là lẻ: thêm bit 0

Cách tìm mã vòng CRC: 
Cho thông báo M(x) ở dạng nhị phân


Cho thông báo M(x) =  110101
Chọn đa thức sinh G(x) = x^3 + 1 = 1001
Tính thông tin cần truyền trên đường dây

M(x) = 110101 = 1*x^5 + 1*x^4 + 0*x^3 +  1*x^2 + 0*x^1 + 1*x^0
              = x^5 + x^4 + x^2 + 1
x^3 *M(x)/G(x) = 

Sử dụng phương pháp XOR để kiểm tra thông tin
* Thu và kiểm tra CRC:
Lấy T(x)/G(x) theo modulo 2(XOR)
+ Nếu phần dư là 0: Thông tin nhận được là đúng
+ Nếu phần dư khác 0: Thông tin nhận được không đúng(sai)

    



